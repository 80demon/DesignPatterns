工厂方法
描述:将程序中创建对象的操作，单独出来处理，创建一个产品的工厂接口，把实际的工作转移到具体的子类。
大大提高了系统扩展的柔性，接口的抽象化处理给相互依赖的对象创建提供了最好的抽象模式

AnimalFactory.java 工厂父类 提供getAnimal抽象方法
Client.java 客户端
Dog.java 实现IAnimal的接口,实现eat的函数方法
DogFactory.java 狗的工厂,继承AnimalFactory，实现getAnimal方法，用于生成Dog对象！
IAnimal.java 动物接口，定义动物通用的一些行为，比如eat的接口！
Sheep.java 实现IAnimal的接口,实现eat的函数
SheepFactory.java 羊的工厂,继承AnimalFactoy,实现getAnimal方法，用于生成Sheep对象!

优点：
 多态性：客户代码可以做到与特定应用无关，适用于任何实体类。
 子类提供挂钩。基类为工厂方法提供缺省实现，子类可以重写新的实现，也可以继承父类的实现。-- 加一层间接性，增加了灵活性连接并行的类层次结构。
 良好的封装性，代码结构清晰。
 扩展性好，在增加产品类的情况下，只需要适当修改具体的工厂类或扩展一个工厂类，就可“拥抱变化”。
 屏蔽产品类。产品类的实现如何变化，调用者都不需要关心，只需关心产品的接口，只要接口保持不变，系统中的上层模块就不会发生变化。
 典型的解耦框架。高层模块只需要知道产品的抽象类，其他的实现类都不需要关心，符合迪米特法则，符合依赖倒置原则，符合里氏替换原则。
缺点：
 需要Creator和相应的子类作为factory method的载体，如果应用模型确实需要creator和子类存在，则很好；否则的话，需要增加一个类层次。
