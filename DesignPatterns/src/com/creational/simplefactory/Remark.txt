简单工厂
描述:简单工厂模式（Simple Factory Pattern）属于类的创建型模式又被叫做静态工厂方法模式（Static FactoryMethod Pattern）,
是通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类或者接口。


优点：工厂类是整个模式的关键所在。
	它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。
	用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的。有利于整个软件体系结构的优化。 
	
缺点：由于工厂类集中了所有实例的创建逻辑，这就直接导致一旦这个工厂出了问题，所有的客户端都会受到牵连；
	而且由于简单工厂模式的产品室基于一个共同的抽象类或者接口，这样一来，但产品的种类增加的时候，
	即有不同的产品接口或者抽象类的时候，工厂类就需要判断何时创建何种种类的产品，
	这就和创建何种种类产品的产品相互混淆在了一起，违背了单一职责，导致系统丧失灵活性和可维护性。
	而且更重要的是，简单工厂模式违背了“开放封闭原则”，就是违背了“系统对扩展开放，对修改关闭”的原则，因为当我新增加一个产品的时候必须修改工厂类，
	相应的工厂类就需要重新编译一遍。
	
总结一下：简单工厂模式分离产品的创建者和消费者，有利于软件系统结构的优化；
	但是由于一切逻辑都集中在一个工厂类中，导致了没有很高的内聚性，同时也违背了“开放封闭原则”。
	另外，简单工厂模式的方法一般都是静态的，而静态工厂方法是无法让子类继承的，因此，简单工厂模式无法形成基于基类的继承树结构。

